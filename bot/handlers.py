import os
from telegram import Update
from telegram.ext import ContextTypes
from loguru import logger

from utils import VideoDownloader, extract_urls, is_supported_url, get_clean_url
from config import settings

# Initialize video downloader
downloader = VideoDownloader()

def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send a welcome message when the command /start is issued."""
    user = update.effective_user
    update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –∏–∑ Instagram Reels, TikTok –∏–ª–∏ YouTube Shorts, "
        "–∏ —è —Å–∫–∞—á–∞—é –µ–≥–æ –¥–ª—è —Ç–µ–±—è.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –≤—Å—Ç–∞–≤—å —Å—Å—ã–ª–∫—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è —Å—Ä–∞–∑—É –Ω–∞—á–Ω—É —Ä–∞–±–æ—Ç—É!"
    )

def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send a help message when the command /help is issued."""
    update.message.reply_text(
        "üîç –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:\n\n"
        "1. –ù–∞–π–¥–∏ –≤–∏–¥–µ–æ –≤ Instagram Reels, TikTok –∏–ª–∏ YouTube Shorts\n"
        "2. –°–∫–æ–ø–∏—Ä—É–π —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ\n"
        "3. –û—Ç–ø—Ä–∞–≤—å —ç—Ç—É —Å—Å—ã–ª–∫—É –º–Ω–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏\n"
        "4. –î–æ–∂–¥–∏—Å—å, –ø–æ–∫–∞ —è —Å–∫–∞—á–∞—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ –≤–∏–¥–µ–æ\n\n"
        "‚ö†Ô∏è –û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ: —è –º–æ–≥—É —Å–∫–∞—á–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø—É–±–ª–∏—á–Ω—ã–µ –≤–∏–¥–µ–æ."
    )

def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Process messages containing URLs."""
    # Extract URLs from the message
    message_text = update.message.text
    urls = extract_urls(message_text)
    
    if not urls:
        update.message.reply_text(
            "–Ø –Ω–µ –Ω–∞—à–µ–ª —Å—Å—ã–ª–æ–∫ –≤ —Ç–≤–æ–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ "
            "–≤–∏–¥–µ–æ –∏–∑ Instagram Reels, TikTok –∏–ª–∏ YouTube Shorts."
        )
        return
    
    # Process the first valid URL
    for url in urls:
        # Check if URL is from a supported source
        if not is_supported_url(url):
            continue
        
        # Clean the URL
        clean_url = get_clean_url(url)
        if not clean_url:
            continue
        
        # Notify user that download is starting
        status_message = update.message.reply_text(
            "‚è≥ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É –≤–∏–¥–µ–æ... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."
        )
        
        try:
            # Download the video
            video_info = downloader.download(clean_url)
            
            if not video_info or not os.path.exists(video_info['file_path']):
                status_message.edit_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –∏–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ."
                )
                return
            
            # Check file size
            file_size_bytes = os.path.getsize(video_info['file_path'])
            file_size_mb = file_size_bytes / (1024 * 1024)
            
            if file_size_mb > settings.max_file_size_mb:
                status_message.edit_text(
                    f"‚ùå –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ ({file_size_mb:.1f} MB). "
                    f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {settings.max_file_size_mb} MB."
                )
                # Clean up the downloaded file
                downloader.cleanup(video_info['file_path'])
                return
            
            # Update status
            status_message.edit_text("üì§ –ó–∞–≥—Ä—É–∂–∞—é –≤–∏–¥–µ–æ –≤ Telegram...")
            
            # Send the video
            with open(video_info['file_path'], 'rb') as video_file:
                update.message.reply_video(
                    video=video_file,
                    caption=f"üìπ {video_info['title']}",
                    supports_streaming=True,
                )
            
            # Update status message
            status_message.edit_text("‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!")
            
            # Clean up the downloaded file
            downloader.cleanup(video_info['file_path'])
            return
            
        except Exception as e:
            logger.error(f"Error processing video: {str(e)}")
            status_message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É."
            )
            return
    
    # If no valid URLs were found
    update.message.reply_text(
        "‚ùå –Ø –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ –≤–∏–¥–µ–æ. "
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Instagram Reels, TikTok –∏–ª–∏ YouTube Shorts."
    )

def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Log the error and send a message to the user."""
    logger.error(f"Update {update} caused error {context.error}")
    
    # Send message to the user
    if update and update.effective_message:
        update.effective_message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        ) 